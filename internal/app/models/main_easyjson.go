// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels(in *jlexer.Lexer, out *MSItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = string(in.String())
		case "Value":
			out.Value = string(in.String())
		case "UserID":
			out.UserID = string(in.String())
		case "Deleted":
			out.Deleted = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels(out *jwriter.Writer, in MSItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"Deleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deleted))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MSItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MSItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MSItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MSItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels1(in *jlexer.Lexer, out *JSONEncoder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			out.ShortURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels1(out *jwriter.Writer, in JSONEncoder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		out.String(string(in.ShortURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONEncoder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONEncoder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONEncoder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONEncoder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels1(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels2(in *jlexer.Lexer, out *JSONDecoder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.LongURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels2(out *jwriter.Writer, in JSONDecoder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.LongURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONDecoder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONDecoder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONDecoder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONDecoder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels2(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels3(in *jlexer.Lexer, out *JSONData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.UUID = int(in.Int())
		case "short_url":
			out.Key = string(in.String())
		case "original_url":
			out.Value = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "deleted":
			out.Deleted = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels3(out *jwriter.Writer, in JSONData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UUID))
	}
	{
		const prefix string = ",\"short_url\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"original_url\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"deleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deleted))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels3(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels4(in *jlexer.Lexer, out *JSONAllEncoder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "short_url":
			out.Key = string(in.String())
		case "original_url":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels4(out *jwriter.Writer, in JSONAllEncoder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"short_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"original_url\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONAllEncoder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONAllEncoder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONAllEncoder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONAllEncoder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels4(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels5(in *jlexer.Lexer, out *DeleteValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = string(in.String())
		case "Userid":
			out.Userid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels5(out *jwriter.Writer, in DeleteValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"Userid\":"
		out.RawString(prefix)
		out.String(string(in.Userid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels5(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels6(in *jlexer.Lexer, out *BatchEncoderArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]BatchEncoder, 0, 2)
					} else {
						out.Items = []BatchEncoder{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 BatchEncoder
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels6(out *jwriter.Writer, in BatchEncoderArray) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchEncoderArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchEncoderArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchEncoderArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchEncoderArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels6(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels7(in *jlexer.Lexer, out *BatchEncoder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "correlation_id":
			out.ID = string(in.String())
		case "short_url":
			out.ShortURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels7(out *jwriter.Writer, in BatchEncoder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"correlation_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"short_url\":"
		out.RawString(prefix)
		out.String(string(in.ShortURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchEncoder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchEncoder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchEncoder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchEncoder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels7(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels8(in *jlexer.Lexer, out *BatchDecoderArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]BatchDecoder, 0, 2)
					} else {
						out.Items = []BatchDecoder{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v4 BatchDecoder
					(v4).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels8(out *jwriter.Writer, in BatchDecoderArray) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Items {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchDecoderArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchDecoderArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchDecoderArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchDecoderArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels8(l, v)
}
func easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels9(in *jlexer.Lexer, out *BatchDecoder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "correlation_id":
			out.ID = string(in.String())
		case "original_url":
			out.LongURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels9(out *jwriter.Writer, in BatchDecoder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"correlation_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"original_url\":"
		out.RawString(prefix)
		out.String(string(in.LongURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchDecoder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchDecoder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComLevshindenisSprint1InternalAppModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchDecoder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchDecoder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComLevshindenisSprint1InternalAppModels9(l, v)
}
